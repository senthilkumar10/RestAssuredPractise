<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="3" ignored="0" total="50" passed="47">
  <reporter-output>
    <line>
      <![CDATA[Test Case Name is: Verify 'Bangalore, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":77.6,"lat":12.98},"weather":[{"id":801,"main":"Clouds","description":"few clouds","icon":"02n"}],"base":"stations","main":{"temp":298.15,"pressure":1010,"humidity":94,"temp_min":298.15,"temp_max":298.15},"visibility":6000,"wind":{"speed":4.6,"deg":230},"clouds":{"all":20},"dt":1560028018,"sys":{"type":1,"id":9208,"message":0.0056,"country":"IN","sunrise":1560039768,"sunset":1560086095},"timezone":19800,"id":1277333,"name":"Bangalore","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Delhi, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":77.22,"lat":28.65},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":309.15,"pressure":1001,"humidity":25,"temp_min":309.15,"temp_max":309.15},"visibility":3200,"wind":{"speed":2.58,"deg":267.955},"clouds":{"all":0},"dt":1560027981,"sys":{"type":1,"id":9165,"message":0.0058,"country":"IN","sunrise":1560037968,"sunset":1560088077},"timezone":19800,"id":1273294,"name":"Delhi","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Agra, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":78.01,"lat":27.18},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":310.022,"pressure":997.65,"humidity":13,"temp_min":310.022,"temp_max":310.022,"sea_level":997.65,"grnd_level":978.79},"wind":{"speed":2.02,"deg":229.097},"clouds":{"all":0},"dt":1560028115,"sys":{"message":0.0052,"country":"IN","sunrise":1560037978,"sunset":1560087688},"timezone":19800,"id":1279259,"name":"Agra","cod":200}]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Bareilly, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":79.41,"lat":28.35},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":306.722,"pressure":998.47,"humidity":15,"temp_min":306.722,"temp_max":306.722,"sea_level":998.47,"grnd_level":978.81},"wind":{"speed":2.6,"deg":79.833},"clouds":{"all":0},"dt":1560028115,"sys":{"message":0.0049,"country":"IN","sunrise":1560037484,"sunset":1560087510},"timezone":19800,"id":1277013,"name":"Bareilly","cod":200}]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Indore, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":75.83,"lat":22.72},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":309.022,"pressure":1000.6,"humidity":19,"temp_min":309.022,"temp_max":309.022,"sea_level":1000.6,"grnd_level":945.29},"wind":{"speed":7.15,"deg":287.898},"clouds":{"all":2},"dt":1560027879,"sys":{"message":0.0056,"country":"IN","sunrise":1560039074,"sunset":1560087639},"timezone":19800,"id":1269743,"name":"Indore","cod":200}]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Mumbai, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":72.85,"lat":19.01},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":304.15,"pressure":1004,"humidity":79,"temp_min":304.15,"temp_max":304.15},"visibility":4000,"wind":{"speed":3.6,"deg":230},"clouds":{"all":40},"dt":1560028115,"sys":{"type":1,"id":9052,"message":0.0055,"country":"IN","sunrise":1560040232,"sunset":1560087910},"timezone":19800,"id":1275339,"name":"Mumbai","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Gurgaon, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":77.03,"lat":28.47},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":309.15,"pressure":1001,"humidity":25,"temp_min":309.15,"temp_max":309.15},"visibility":3200,"wind":{"speed":2.58,"deg":267.955},"clouds":{"all":0},"dt":1560028116,"sys":{"type":1,"id":9165,"message":0.0056,"country":"IN","sunrise":1560038038,"sunset":1560088098},"timezone":19800,"id":1270642,"name":"Gurgaon","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Noida, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":77.35,"lat":28.57},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":309.15,"pressure":1001,"humidity":25,"temp_min":309.15,"temp_max":309.15},"visibility":3200,"wind":{"speed":2.58,"deg":267.955},"clouds":{"all":0},"dt":1560028116,"sys":{"type":1,"id":9165,"message":0.006,"country":"IN","sunrise":1560037948,"sunset":1560088035},"timezone":19800,"id":7279746,"name":"Noida","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Mysore, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":76.65,"lat":12.31},"weather":[{"id":804,"main":"Clouds","description":"overcast clouds","icon":"04n"}],"base":"stations","main":{"temp":295.722,"pressure":1008.33,"humidity":85,"temp_min":295.722,"temp_max":295.722,"sea_level":1008.33,"grnd_level":921.53},"wind":{"speed":4.33,"deg":231.41},"clouds":{"all":98},"dt":1560028117,"sys":{"message":0.0073,"country":"IN","sunrise":1560040068,"sunset":1560086251},"timezone":19800,"id":1262321,"name":"Mysore","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Satna, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":80.83,"lat":24.58},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":308.722,"pressure":1001.02,"humidity":16,"temp_min":308.722,"temp_max":308.722,"sea_level":1001.02,"grnd_level":957.51},"wind":{"speed":2.12,"deg":88.699},"clouds":{"all":0},"dt":1560028117,"sys":{"message":0.0058,"country":"IN","sunrise":1560037641,"sunset":1560086671},"timezone":19800,"id":1257022,"name":"Satna","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Tirupati, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":79.42,"lat":13.63},"weather":[{"id":804,"main":"Clouds","description":"overcast clouds","icon":"04n"}],"base":"stations","main":{"temp":303.022,"pressure":1003.94,"humidity":60,"temp_min":303.022,"temp_max":303.022,"sea_level":1003.94,"grnd_level":946.74},"wind":{"speed":2.48,"deg":155.338},"clouds":{"all":94},"dt":1560028117,"sys":{"message":0.0086,"country":"IN","sunrise":1560039260,"sunset":1560085729},"timezone":19800,"id":1254360,"name":"Tirupati","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Patna, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":85.12,"lat":25.61},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":304.15,"pressure":1000,"humidity":66,"temp_min":304.15,"temp_max":304.15},"visibility":4500,"wind":{"speed":4.1,"deg":100},"clouds":{"all":0},"dt":1560028117,"sys":{"type":1,"id":9129,"message":0.0051,"country":"IN","sunrise":1560036479,"sunset":1560085774},"timezone":19800,"id":1260086,"name":"Patna","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Kolkata, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":88.35,"lat":22.57},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":301.15,"pressure":1001,"humidity":88,"temp_min":301.15,"temp_max":301.15},"visibility":3500,"wind":{"speed":2.1,"deg":140},"clouds":{"all":40},"dt":1560028118,"sys":{"type":1,"id":9114,"message":0.0055,"country":"IN","sunrise":1560036087,"sunset":1560084615},"timezone":19800,"id":1275004,"name":"Kolkata","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Ooty, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":76.7,"lat":11.41},"weather":[{"id":801,"main":"Clouds","description":"few clouds","icon":"02n"}],"base":"stations","main":{"temp":300.15,"pressure":1008,"humidity":74,"temp_min":300.15,"temp_max":300.15},"visibility":6000,"wind":{"speed":2.1,"deg":230},"clouds":{"all":20},"dt":1560028118,"sys":{"type":1,"id":9206,"message":0.005,"country":"IN","sunrise":1560040153,"sunset":1560086142},"timezone":19800,"id":1253993,"name":"Ooty","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Hyderabad, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":78.47,"lat":17.36},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":300.57,"pressure":1007,"humidity":94,"temp_min":300.15,"temp_max":300.93},"visibility":5000,"wind":{"speed":1.5,"deg":210},"clouds":{"all":75},"dt":1560028123,"sys":{"type":1,"id":9213,"message":0.0204,"country":"IN","sunrise":1560039073,"sunset":1560086372},"timezone":19800,"id":1269843,"name":"Hyderabad","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Lucknow, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":80.93,"lat":26.84},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":304.15,"pressure":1000,"humidity":55,"temp_min":304.15,"temp_max":304.15},"visibility":3000,"wind":{"speed":1},"clouds":{"all":0},"dt":1560028124,"sys":{"type":1,"id":9176,"message":0.0074,"country":"IN","sunrise":1560037323,"sunset":1560086941},"timezone":19800,"id":1264733,"name":"Lucknow","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Hisar, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":75.73,"lat":29.16},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":311.022,"pressure":996.85,"humidity":10,"temp_min":311.022,"temp_max":311.022,"sea_level":996.85,"grnd_level":975.62},"wind":{"speed":3.6,"deg":250.006},"clouds":{"all":0},"dt":1560028124,"sys":{"message":0.0054,"country":"IN","sunrise":1560038254,"sunset":1560088506},"timezone":19800,"id":1270022,"name":"Hisar","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Ahmedabad, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":72.58,"lat":23.02},"weather":[{"id":711,"main":"Smoke","description":"smoke","icon":"50n"}],"base":"stations","main":{"temp":306.15,"pressure":1001,"humidity":55,"temp_min":306.15,"temp_max":306.15},"visibility":4000,"wind":{"speed":2.6,"deg":250},"clouds":{"all":19},"dt":1560028124,"sys":{"type":1,"id":9049,"message":0.0066,"country":"IN","sunrise":1560039817,"sunset":1560088456},"timezone":19800,"id":1279233,"name":"Ahmedabad","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Bhubaneswar, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":85.84,"lat":20.26},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":300.15,"pressure":1002,"humidity":83,"temp_min":300.15,"temp_max":300.15},"visibility":3000,"wind":{"speed":3.06,"deg":170.532},"clouds":{"all":75},"dt":1560028124,"sys":{"type":1,"id":9113,"message":0.0056,"country":"IN","sunrise":1560036968,"sunset":1560084939},"timezone":19800,"id":1275817,"name":"Bhubaneswar","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Chennai, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":80.28,"lat":13.09},"weather":[{"id":801,"main":"Clouds","description":"few clouds","icon":"02n"}],"base":"stations","main":{"temp":303.89,"pressure":1004,"humidity":74,"temp_min":303.71,"temp_max":304.15},"visibility":6000,"wind":{"speed":4.6,"deg":210},"clouds":{"all":20},"dt":1560028107,"sys":{"type":1,"id":9218,"message":0.0052,"country":"IN","sunrise":1560039113,"sunset":1560085463},"timezone":19800,"id":1264527,"name":"Chennai","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Texas, AU' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":151.17,"lat":-28.86},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":283.522,"pressure":1025.78,"humidity":94,"temp_min":283.522,"temp_max":283.522,"sea_level":1025.78,"grnd_level":983.45},"wind":{"speed":1.62,"deg":125.637},"clouds":{"all":0},"dt":1560028125,"sys":{"message":0.0042,"country":"AU","sunrise":1560026645,"sunset":1560063899},"timezone":36000,"id":2160132,"name":"Texas","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Chicago, US' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":-87.62,"lat":41.88},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01d"}],"base":"stations","main":{"temp":297.17,"pressure":1016,"humidity":49,"temp_min":293.71,"temp_max":300.37},"visibility":16093,"wind":{"speed":3.1,"deg":60},"clouds":{"all":1},"dt":1560028125,"sys":{"type":1,"id":5453,"message":0.0101,"country":"US","sunrise":1559988937,"sunset":1560043419},"timezone":-18000,"id":4887398,"name":"Chicago","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Houston, US' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":-95.37,"lat":29.76},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01d"}],"base":"stations","main":{"temp":307.42,"pressure":1008,"humidity":55,"temp_min":305.93,"temp_max":308.71},"visibility":16093,"wind":{"speed":3.6,"deg":300},"clouds":{"all":1},"dt":1560028093,"sys":{"type":1,"id":3370,"message":0.0115,"country":"US","sunrise":1559992836,"sunset":1560043241},"timezone":-18000,"id":4699066,"name":"Houston","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Los Angeles, US' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":-118.24,"lat":34.05},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01d"}],"base":"stations","main":{"temp":297.8,"pressure":1013,"humidity":53,"temp_min":293.15,"temp_max":302.04},"visibility":16093,"wind":{"speed":4.24,"deg":219.487},"clouds":{"all":1},"dt":1560027836,"sys":{"type":1,"id":3694,"message":0.0096,"country":"US","sunrise":1559997684,"sunset":1560049372},"timezone":-25200,"id":5368361,"name":"Los Angeles","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Philadelphia, US' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":-75.16,"lat":39.95},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01d"}],"base":"stations","main":{"temp":298.85,"pressure":1021,"humidity":44,"temp_min":297.59,"temp_max":300.37},"visibility":16093,"wind":{"speed":4.6,"deg":40},"clouds":{"all":1},"dt":1560028024,"sys":{"type":1,"id":4743,"message":0.0115,"country":"US","sunrise":1559986327,"sunset":1560040048},"timezone":-14400,"id":4560349,"name":"Philadelphia","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Manchester, US' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":-71.45,"lat":43},"weather":[{"id":801,"main":"Clouds","description":"few clouds","icon":"02d"}],"base":"stations","main":{"temp":298.71,"pressure":1021,"humidity":15,"temp_min":295.37,"temp_max":300.93},"visibility":16093,"wind":{"speed":2.1},"clouds":{"all":20},"dt":1560027854,"sys":{"type":1,"id":4895,"message":0.0106,"country":"US","sunrise":1559984824,"sunset":1560039770},"timezone":-14400,"id":5089178,"name":"Manchester","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'London, GB' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":-0.13,"lat":51.51},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":285.45,"pressure":1019,"humidity":50,"temp_min":283.15,"temp_max":288.15},"visibility":10000,"wind":{"speed":6.2,"deg":270},"clouds":{"all":0},"dt":1560027917,"sys":{"type":1,"id":1502,"message":0.0126,"country":"GB","sunrise":1559965497,"sunset":1560024859},"timezone":3600,"id":2643743,"name":"London","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Edinburgh, GB' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":-3.19,"lat":55.95},"weather":[{"id":520,"main":"Rain","description":"light intensity shower rain","icon":"09n"}],"base":"stations","main":{"temp":284.07,"pressure":1011,"humidity":93,"temp_min":282.59,"temp_max":285.37},"visibility":10000,"wind":{"speed":2.1,"deg":260},"clouds":{"all":0},"dt":1560028111,"sys":{"type":1,"id":1442,"message":0.0067,"country":"GB","sunrise":1559964569,"sunset":1560027256},"timezone":3600,"id":2650225,"name":"Edinburgh","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Birmingham, GB' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":-1.89,"lat":52.48},"weather":[{"id":500,"main":"Rain","description":"light rain","icon":"10n"}],"base":"stations","main":{"temp":284.41,"pressure":1017,"humidity":66,"temp_min":282.59,"temp_max":286.15},"visibility":10000,"wind":{"speed":3.6,"deg":250},"rain":{"1h":0.25},"clouds":{"all":40},"dt":1560028110,"sys":{"type":1,"id":1375,"message":0.0071,"country":"GB","sunrise":1559965597,"sunset":1560025604},"timezone":3600,"id":2655603,"name":"Birmingham","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Glasgow, GB' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"coord":{"lon":-4.24,"lat":55.86},"weather":[{"id":500,"main":"Rain","description":"light rain","icon":"10n"}],"base":"stations","main":{"temp":284.41,"pressure":1012,"humidity":87,"temp_min":283.15,"temp_max":285.37},"visibility":10000,"wind":{"speed":3.6,"deg":240},"rain":{"3h":0.188},"clouds":{"all":94},"dt":1560028127,"sys":{"type":1,"id":1441,"message":0.0056,"country":"GB","sunrise":1559964860,"sunset":1560027469},"timezone":3600,"id":2648579,"name":"Glasgow","cod":200}]]>
    </line>
    <line>
      <![CDATA[Verified the Status code successfully]]>
    </line>
    <line>
      <![CDATA[Country code has verified successfully]]>
    </line>
    <line>
      <![CDATA[City name has verified successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Bang City, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'ABC1, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'ABC2, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'ABC3, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'ABC4, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'ABC5, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'ABC6, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'ABC7, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'ABC8, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Tirupati, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Bangalore, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Delhi, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Agra, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Bareilly, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Indore, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Mumbai, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Gurgaon, IN' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Manchester, US' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Birmingham, GB' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
    <line>
      <![CDATA[Test Case Name is: Verify 'Glasgow, GB' City Info]]>
    </line>
    <line>
      <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
    </line>
    <line>
      <![CDATA[Verified the error message successfully]]>
    </line>
  </reporter-output>
  <suite name="Default suite" duration-ms="22409" started-at="2019-06-08T21:08:29Z" finished-at="2019-06-08T21:08:51Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="22409" started-at="2019-06-08T21:08:29Z" finished-at="2019-06-08T21:08:51Z">
      <class name="com.restassured.practise.TestWeatherAPIWithDataProvider">
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="225" started-at="2019-06-08T21:08:30Z" finished-at="2019-06-08T21:08:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="3710" started-at="2019-06-08T21:08:30Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Bangalore, IN' City Info, City Name=Bangalore, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Bangalore, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":77.6,"lat":12.98},"weather":[{"id":801,"main":"Clouds","description":"few clouds","icon":"02n"}],"base":"stations","main":{"temp":298.15,"pressure":1010,"humidity":94,"temp_min":298.15,"temp_max":298.15},"visibility":6000,"wind":{"speed":4.6,"deg":230},"clouds":{"all":20},"dt":1560028018,"sys":{"type":1,"id":9208,"message":0.0056,"country":"IN","sunrise":1560039768,"sunset":1560086095},"timezone":19800,"id":1277333,"name":"Bangalore","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="618" started-at="2019-06-08T21:08:34Z" finished-at="2019-06-08T21:08:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Bangalore, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:34Z" finished-at="2019-06-08T21:08:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="274" started-at="2019-06-08T21:08:34Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Delhi, IN' City Info, City Name=Delhi, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Delhi, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":77.22,"lat":28.65},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":309.15,"pressure":1001,"humidity":25,"temp_min":309.15,"temp_max":309.15},"visibility":3200,"wind":{"speed":2.58,"deg":267.955},"clouds":{"all":0},"dt":1560027981,"sys":{"type":1,"id":9165,"message":0.0058,"country":"IN","sunrise":1560037968,"sunset":1560088077},"timezone":19800,"id":1273294,"name":"Delhi","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="108" started-at="2019-06-08T21:08:34Z" finished-at="2019-06-08T21:08:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Delhi, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:35Z" finished-at="2019-06-08T21:08:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="201" started-at="2019-06-08T21:08:35Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Agra, IN' City Info, City Name=Agra, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=300}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <300> but was <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <300> but was <200>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:237)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:492)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:655)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:125)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:133)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(TestWeatherAPIWithDataProvider.java:52)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Agra, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":78.01,"lat":27.18},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":310.022,"pressure":997.65,"humidity":13,"temp_min":310.022,"temp_max":310.022,"sea_level":997.65,"grnd_level":978.79},"wind":{"speed":2.02,"deg":229.097},"clouds":{"all":0},"dt":1560028115,"sys":{"message":0.0052,"country":"IN","sunrise":1560037978,"sunset":1560087688},"timezone":19800,"id":1279259,"name":"Agra","cod":200}]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="284" started-at="2019-06-08T21:08:35Z" finished-at="2019-06-08T21:08:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=FAILURE method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Agra, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="2" started-at="2019-06-08T21:08:35Z" finished-at="2019-06-08T21:08:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="211" started-at="2019-06-08T21:08:35Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Bareilly, IN' City Info, City Name=Bareilly, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=300}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <300> but was <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <300> but was <200>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:492)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:655)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:125)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:133)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(TestWeatherAPIWithDataProvider.java:52)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Bareilly, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":79.41,"lat":28.35},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":306.722,"pressure":998.47,"humidity":15,"temp_min":306.722,"temp_max":306.722,"sea_level":998.47,"grnd_level":978.81},"wind":{"speed":2.6,"deg":79.833},"clouds":{"all":0},"dt":1560028115,"sys":{"message":0.0049,"country":"IN","sunrise":1560037484,"sunset":1560087510},"timezone":19800,"id":1277013,"name":"Bareilly","cod":200}]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="79" started-at="2019-06-08T21:08:35Z" finished-at="2019-06-08T21:08:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=FAILURE method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Bareilly, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:35Z" finished-at="2019-06-08T21:08:35Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="FAIL" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="175" started-at="2019-06-08T21:08:35Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Indore, IN' City Info, City Name=Indore, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=300}]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <300> but was <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <300> but was <200>.

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:422)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:492)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:655)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:125)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:133)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at io.restassured.internal.ValidatableResponseImpl.super$2$statusCode(ValidatableResponseImpl.groovy)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy:142)
at io.restassured.internal.ValidatableResponseImpl.statusCode(ValidatableResponseImpl.groovy)
at com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(TestWeatherAPIWithDataProvider.java:52)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:497)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:124)
at org.testng.internal.Invoker.invokeMethod(Invoker.java:583)
at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:719)
at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:989)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:109)
at org.testng.TestRunner.privateRun(TestRunner.java:648)
at org.testng.TestRunner.run(TestRunner.java:505)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:455)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:450)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:415)
at org.testng.SuiteRunner.run(SuiteRunner.java:364)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:84)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1208)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1137)
at org.testng.TestNG.runSuites(TestNG.java:1049)
at org.testng.TestNG.run(TestNG.java:1017)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Indore, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":75.83,"lat":22.72},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":309.022,"pressure":1000.6,"humidity":19,"temp_min":309.022,"temp_max":309.022,"sea_level":1000.6,"grnd_level":945.29},"wind":{"speed":7.15,"deg":287.898},"clouds":{"all":2},"dt":1560027879,"sys":{"message":0.0056,"country":"IN","sunrise":1560039074,"sunset":1560087639},"timezone":19800,"id":1269743,"name":"Indore","cod":200}]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="96" started-at="2019-06-08T21:08:36Z" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=FAILURE method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Indore, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:36Z" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="246" started-at="2019-06-08T21:08:36Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Mumbai, IN' City Info, City Name=Mumbai, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Mumbai, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":72.85,"lat":19.01},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":304.15,"pressure":1004,"humidity":79,"temp_min":304.15,"temp_max":304.15},"visibility":4000,"wind":{"speed":3.6,"deg":230},"clouds":{"all":40},"dt":1560028115,"sys":{"type":1,"id":9052,"message":0.0055,"country":"IN","sunrise":1560040232,"sunset":1560087910},"timezone":19800,"id":1275339,"name":"Mumbai","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="83" started-at="2019-06-08T21:08:36Z" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Mumbai, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="2" started-at="2019-06-08T21:08:36Z" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="231" started-at="2019-06-08T21:08:36Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Gurgaon, IN' City Info, City Name=Gurgaon, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Gurgaon, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":77.03,"lat":28.47},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":309.15,"pressure":1001,"humidity":25,"temp_min":309.15,"temp_max":309.15},"visibility":3200,"wind":{"speed":2.58,"deg":267.955},"clouds":{"all":0},"dt":1560028116,"sys":{"type":1,"id":9165,"message":0.0056,"country":"IN","sunrise":1560038038,"sunset":1560088098},"timezone":19800,"id":1270642,"name":"Gurgaon","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="57" started-at="2019-06-08T21:08:36Z" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Gurgaon, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:36Z" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="199" started-at="2019-06-08T21:08:36Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:36Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Noida, IN' City Info, City Name=Noida, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Noida, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":77.35,"lat":28.57},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":309.15,"pressure":1001,"humidity":25,"temp_min":309.15,"temp_max":309.15},"visibility":3200,"wind":{"speed":2.58,"deg":267.955},"clouds":{"all":0},"dt":1560028116,"sys":{"type":1,"id":9165,"message":0.006,"country":"IN","sunrise":1560037948,"sunset":1560088035},"timezone":19800,"id":7279746,"name":"Noida","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="72" started-at="2019-06-08T21:08:36Z" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Noida, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="192" started-at="2019-06-08T21:08:37Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Mysore, IN' City Info, City Name=Mysore, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Mysore, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":76.65,"lat":12.31},"weather":[{"id":804,"main":"Clouds","description":"overcast clouds","icon":"04n"}],"base":"stations","main":{"temp":295.722,"pressure":1008.33,"humidity":85,"temp_min":295.722,"temp_max":295.722,"sea_level":1008.33,"grnd_level":921.53},"wind":{"speed":4.33,"deg":231.41},"clouds":{"all":98},"dt":1560028117,"sys":{"message":0.0073,"country":"IN","sunrise":1560040068,"sunset":1560086251},"timezone":19800,"id":1262321,"name":"Mysore","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:37Z" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="58" started-at="2019-06-08T21:08:37Z" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Mysore, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="202" started-at="2019-06-08T21:08:37Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Satna, IN' City Info, City Name=Satna, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Satna, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":80.83,"lat":24.58},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":308.722,"pressure":1001.02,"humidity":16,"temp_min":308.722,"temp_max":308.722,"sea_level":1001.02,"grnd_level":957.51},"wind":{"speed":2.12,"deg":88.699},"clouds":{"all":0},"dt":1560028117,"sys":{"message":0.0058,"country":"IN","sunrise":1560037641,"sunset":1560086671},"timezone":19800,"id":1257022,"name":"Satna","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:37Z" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="66" started-at="2019-06-08T21:08:37Z" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Satna, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="200" started-at="2019-06-08T21:08:37Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Tirupati, IN' City Info, City Name=Tirupati, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Tirupati, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":79.42,"lat":13.63},"weather":[{"id":804,"main":"Clouds","description":"overcast clouds","icon":"04n"}],"base":"stations","main":{"temp":303.022,"pressure":1003.94,"humidity":60,"temp_min":303.022,"temp_max":303.022,"sea_level":1003.94,"grnd_level":946.74},"wind":{"speed":2.48,"deg":155.338},"clouds":{"all":94},"dt":1560028117,"sys":{"message":0.0086,"country":"IN","sunrise":1560039260,"sunset":1560085729},"timezone":19800,"id":1254360,"name":"Tirupati","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:37Z" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="66" started-at="2019-06-08T21:08:37Z" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Tirupati, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:37Z" finished-at="2019-06-08T21:08:37Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="235" started-at="2019-06-08T21:08:37Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Patna, IN' City Info, City Name=Patna, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Patna, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":85.12,"lat":25.61},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":304.15,"pressure":1000,"humidity":66,"temp_min":304.15,"temp_max":304.15},"visibility":4500,"wind":{"speed":4.1,"deg":100},"clouds":{"all":0},"dt":1560028117,"sys":{"type":1,"id":9129,"message":0.0051,"country":"IN","sunrise":1560036479,"sunset":1560085774},"timezone":19800,"id":1260086,"name":"Patna","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="53" started-at="2019-06-08T21:08:38Z" finished-at="2019-06-08T21:08:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Patna, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:38Z" finished-at="2019-06-08T21:08:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="189" started-at="2019-06-08T21:08:38Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Kolkata, IN' City Info, City Name=Kolkata, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Kolkata, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":88.35,"lat":22.57},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":301.15,"pressure":1001,"humidity":88,"temp_min":301.15,"temp_max":301.15},"visibility":3500,"wind":{"speed":2.1,"deg":140},"clouds":{"all":40},"dt":1560028118,"sys":{"type":1,"id":9114,"message":0.0055,"country":"IN","sunrise":1560036087,"sunset":1560084615},"timezone":19800,"id":1275004,"name":"Kolkata","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="156" started-at="2019-06-08T21:08:38Z" finished-at="2019-06-08T21:08:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Kolkata, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:38Z" finished-at="2019-06-08T21:08:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="238" started-at="2019-06-08T21:08:38Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Ooty, IN' City Info, City Name=Ooty, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Ooty, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":76.7,"lat":11.41},"weather":[{"id":801,"main":"Clouds","description":"few clouds","icon":"02n"}],"base":"stations","main":{"temp":300.15,"pressure":1008,"humidity":74,"temp_min":300.15,"temp_max":300.15},"visibility":6000,"wind":{"speed":2.1,"deg":230},"clouds":{"all":20},"dt":1560028118,"sys":{"type":1,"id":9206,"message":0.005,"country":"IN","sunrise":1560040153,"sunset":1560086142},"timezone":19800,"id":1253993,"name":"Ooty","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="122" started-at="2019-06-08T21:08:38Z" finished-at="2019-06-08T21:08:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Ooty, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="2" started-at="2019-06-08T21:08:38Z" finished-at="2019-06-08T21:08:38Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="4891" started-at="2019-06-08T21:08:38Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Hyderabad, IN' City Info, City Name=Hyderabad, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Hyderabad, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":78.47,"lat":17.36},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":300.57,"pressure":1007,"humidity":94,"temp_min":300.15,"temp_max":300.93},"visibility":5000,"wind":{"speed":1.5,"deg":210},"clouds":{"all":75},"dt":1560028123,"sys":{"type":1,"id":9213,"message":0.0204,"country":"IN","sunrise":1560039073,"sunset":1560086372},"timezone":19800,"id":1269843,"name":"Hyderabad","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="93" started-at="2019-06-08T21:08:43Z" finished-at="2019-06-08T21:08:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Hyderabad, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:43Z" finished-at="2019-06-08T21:08:43Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="356" started-at="2019-06-08T21:08:43Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Lucknow, IN' City Info, City Name=Lucknow, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Lucknow, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":80.93,"lat":26.84},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":304.15,"pressure":1000,"humidity":55,"temp_min":304.15,"temp_max":304.15},"visibility":3000,"wind":{"speed":1},"clouds":{"all":0},"dt":1560028124,"sys":{"type":1,"id":9176,"message":0.0074,"country":"IN","sunrise":1560037323,"sunset":1560086941},"timezone":19800,"id":1264733,"name":"Lucknow","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="80" started-at="2019-06-08T21:08:44Z" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Lucknow, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:44Z" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="178" started-at="2019-06-08T21:08:44Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Hisar, IN' City Info, City Name=Hisar, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Hisar, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":75.73,"lat":29.16},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":311.022,"pressure":996.85,"humidity":10,"temp_min":311.022,"temp_max":311.022,"sea_level":996.85,"grnd_level":975.62},"wind":{"speed":3.6,"deg":250.006},"clouds":{"all":0},"dt":1560028124,"sys":{"message":0.0054,"country":"IN","sunrise":1560038254,"sunset":1560088506},"timezone":19800,"id":1270022,"name":"Hisar","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="44" started-at="2019-06-08T21:08:44Z" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Hisar, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:44Z" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="183" started-at="2019-06-08T21:08:44Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Ahmedabad, IN' City Info, City Name=Ahmedabad, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Ahmedabad, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":72.58,"lat":23.02},"weather":[{"id":711,"main":"Smoke","description":"smoke","icon":"50n"}],"base":"stations","main":{"temp":306.15,"pressure":1001,"humidity":55,"temp_min":306.15,"temp_max":306.15},"visibility":4000,"wind":{"speed":2.6,"deg":250},"clouds":{"all":19},"dt":1560028124,"sys":{"type":1,"id":9049,"message":0.0066,"country":"IN","sunrise":1560039817,"sunset":1560088456},"timezone":19800,"id":1279233,"name":"Ahmedabad","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="107" started-at="2019-06-08T21:08:44Z" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Ahmedabad, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:44Z" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="175" started-at="2019-06-08T21:08:44Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:44Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Bhubaneswar, IN' City Info, City Name=Bhubaneswar, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Bhubaneswar, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":85.84,"lat":20.26},"weather":[{"id":721,"main":"Haze","description":"haze","icon":"50n"}],"base":"stations","main":{"temp":300.15,"pressure":1002,"humidity":83,"temp_min":300.15,"temp_max":300.15},"visibility":3000,"wind":{"speed":3.06,"deg":170.532},"clouds":{"all":75},"dt":1560028124,"sys":{"type":1,"id":9113,"message":0.0056,"country":"IN","sunrise":1560036968,"sunset":1560084939},"timezone":19800,"id":1275817,"name":"Bhubaneswar","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="53" started-at="2019-06-08T21:08:44Z" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Bhubaneswar, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:45Z" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="211" started-at="2019-06-08T21:08:45Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Chennai, IN' City Info, City Name=Chennai, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=IN, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Chennai, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":80.28,"lat":13.09},"weather":[{"id":801,"main":"Clouds","description":"few clouds","icon":"02n"}],"base":"stations","main":{"temp":303.89,"pressure":1004,"humidity":74,"temp_min":303.71,"temp_max":304.15},"visibility":6000,"wind":{"speed":4.6,"deg":210},"clouds":{"all":20},"dt":1560028107,"sys":{"type":1,"id":9218,"message":0.0052,"country":"IN","sunrise":1560039113,"sunset":1560085463},"timezone":19800,"id":1264527,"name":"Chennai","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="105" started-at="2019-06-08T21:08:45Z" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Chennai, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:45Z" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="173" started-at="2019-06-08T21:08:45Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Texas, AU' City Info, City Name=Texas, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=AU, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Texas, AU' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":151.17,"lat":-28.86},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":283.522,"pressure":1025.78,"humidity":94,"temp_min":283.522,"temp_max":283.522,"sea_level":1025.78,"grnd_level":983.45},"wind":{"speed":1.62,"deg":125.637},"clouds":{"all":0},"dt":1560028125,"sys":{"message":0.0042,"country":"AU","sunrise":1560026645,"sunset":1560063899},"timezone":36000,"id":2160132,"name":"Texas","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="49" started-at="2019-06-08T21:08:45Z" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Texas, AU' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="204" started-at="2019-06-08T21:08:45Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Chicago, US' City Info, City Name=Chicago, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=US, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Chicago, US' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":-87.62,"lat":41.88},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01d"}],"base":"stations","main":{"temp":297.17,"pressure":1016,"humidity":49,"temp_min":293.71,"temp_max":300.37},"visibility":16093,"wind":{"speed":3.1,"deg":60},"clouds":{"all":1},"dt":1560028125,"sys":{"type":1,"id":5453,"message":0.0101,"country":"US","sunrise":1559988937,"sunset":1560043419},"timezone":-18000,"id":4887398,"name":"Chicago","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:45Z" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="58" started-at="2019-06-08T21:08:45Z" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Chicago, US' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:45Z" finished-at="2019-06-08T21:08:45Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="171" started-at="2019-06-08T21:08:45Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Houston, US' City Info, City Name=Houston, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=US, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Houston, US' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":-95.37,"lat":29.76},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01d"}],"base":"stations","main":{"temp":307.42,"pressure":1008,"humidity":55,"temp_min":305.93,"temp_max":308.71},"visibility":16093,"wind":{"speed":3.6,"deg":300},"clouds":{"all":1},"dt":1560028093,"sys":{"type":1,"id":3370,"message":0.0115,"country":"US","sunrise":1559992836,"sunset":1560043241},"timezone":-18000,"id":4699066,"name":"Houston","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="41" started-at="2019-06-08T21:08:46Z" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Houston, US' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="163" started-at="2019-06-08T21:08:46Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Los Angeles, US' City Info, City Name=Los Angeles, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=US, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Los Angeles, US' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":-118.24,"lat":34.05},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01d"}],"base":"stations","main":{"temp":297.8,"pressure":1013,"humidity":53,"temp_min":293.15,"temp_max":302.04},"visibility":16093,"wind":{"speed":4.24,"deg":219.487},"clouds":{"all":1},"dt":1560027836,"sys":{"type":1,"id":3694,"message":0.0096,"country":"US","sunrise":1559997684,"sunset":1560049372},"timezone":-25200,"id":5368361,"name":"Los Angeles","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:46Z" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="39" started-at="2019-06-08T21:08:46Z" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Los Angeles, US' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="193" started-at="2019-06-08T21:08:46Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Philadelphia, US' City Info, City Name=Philadelphia, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=US, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Philadelphia, US' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":-75.16,"lat":39.95},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01d"}],"base":"stations","main":{"temp":298.85,"pressure":1021,"humidity":44,"temp_min":297.59,"temp_max":300.37},"visibility":16093,"wind":{"speed":4.6,"deg":40},"clouds":{"all":1},"dt":1560028024,"sys":{"type":1,"id":4743,"message":0.0115,"country":"US","sunrise":1559986327,"sunset":1560040048},"timezone":-14400,"id":4560349,"name":"Philadelphia","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:46Z" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="69" started-at="2019-06-08T21:08:46Z" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Philadelphia, US' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="216" started-at="2019-06-08T21:08:46Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Manchester, US' City Info, City Name=Manchester, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=US, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Manchester, US' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":-71.45,"lat":43},"weather":[{"id":801,"main":"Clouds","description":"few clouds","icon":"02d"}],"base":"stations","main":{"temp":298.71,"pressure":1021,"humidity":15,"temp_min":295.37,"temp_max":300.93},"visibility":16093,"wind":{"speed":2.1},"clouds":{"all":20},"dt":1560027854,"sys":{"type":1,"id":4895,"message":0.0106,"country":"US","sunrise":1559984824,"sunset":1560039770},"timezone":-14400,"id":5089178,"name":"Manchester","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:46Z" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="38" started-at="2019-06-08T21:08:46Z" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Manchester, US' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:46Z" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="166" started-at="2019-06-08T21:08:46Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:46Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'London, GB' City Info, City Name=London, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=GB, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'London, GB' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":-0.13,"lat":51.51},"weather":[{"id":800,"main":"Clear","description":"clear sky","icon":"01n"}],"base":"stations","main":{"temp":285.45,"pressure":1019,"humidity":50,"temp_min":283.15,"temp_max":288.15},"visibility":10000,"wind":{"speed":6.2,"deg":270},"clouds":{"all":0},"dt":1560027917,"sys":{"type":1,"id":1502,"message":0.0126,"country":"GB","sunrise":1559965497,"sunset":1560024859},"timezone":3600,"id":2643743,"name":"London","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="52" started-at="2019-06-08T21:08:46Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'London, GB' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:47Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="163" started-at="2019-06-08T21:08:47Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Edinburgh, GB' City Info, City Name=Edinburgh, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=GB, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Edinburgh, GB' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":-3.19,"lat":55.95},"weather":[{"id":520,"main":"Rain","description":"light intensity shower rain","icon":"09n"}],"base":"stations","main":{"temp":284.07,"pressure":1011,"humidity":93,"temp_min":282.59,"temp_max":285.37},"visibility":10000,"wind":{"speed":2.1,"deg":260},"clouds":{"all":0},"dt":1560028111,"sys":{"type":1,"id":1442,"message":0.0067,"country":"GB","sunrise":1559964569,"sunset":1560027256},"timezone":3600,"id":2650225,"name":"Edinburgh","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="40" started-at="2019-06-08T21:08:47Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Edinburgh, GB' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:47Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="159" started-at="2019-06-08T21:08:47Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Birmingham, GB' City Info, City Name=Birmingham, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=GB, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Birmingham, GB' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":-1.89,"lat":52.48},"weather":[{"id":500,"main":"Rain","description":"light rain","icon":"10n"}],"base":"stations","main":{"temp":284.41,"pressure":1017,"humidity":66,"temp_min":282.59,"temp_max":286.15},"visibility":10000,"wind":{"speed":3.6,"deg":250},"rain":{"1h":0.25},"clouds":{"all":40},"dt":1560028110,"sys":{"type":1,"id":1375,"message":0.0071,"country":"GB","sunrise":1559965597,"sunset":1560025604},"timezone":3600,"id":2655603,"name":"Birmingham","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="44" started-at="2019-06-08T21:08:47Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Birmingham, GB' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithPositiveData" duration-ms="179" started-at="2019-06-08T21:08:47Z" data-provider="PositiveTestScenarios" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Glasgow, GB' City Info, City Name=Glasgow, App ID=17e5c69afcef0f16365a6c3b0cba4400, Country Code=GB, Status Code=200}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Glasgow, GB' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"coord":{"lon":-4.24,"lat":55.86},"weather":[{"id":500,"main":"Rain","description":"light rain","icon":"10n"}],"base":"stations","main":{"temp":284.41,"pressure":1012,"humidity":87,"temp_min":283.15,"temp_max":285.37},"visibility":10000,"wind":{"speed":3.6,"deg":240},"rain":{"3h":0.188},"clouds":{"all":94},"dt":1560028127,"sys":{"type":1,"id":1441,"message":0.0056,"country":"GB","sunrise":1559964860,"sunset":1560027469},"timezone":3600,"id":2648579,"name":"Glasgow","cod":200}]]>
            </line>
            <line>
              <![CDATA[Verified the Status code successfully]]>
            </line>
            <line>
              <![CDATA[Country code has verified successfully]]>
            </line>
            <line>
              <![CDATA[City name has verified successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithPositiveData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:47Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="55" started-at="2019-06-08T21:08:47Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithPositiveData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithPositiveData(java.util.Map)[pri:-1, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Glasgow, GB' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:47Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="150" started-at="2019-06-08T21:08:47Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Bang City, IN' City Info, Error Message=city not found, App ID=17e5c69afcef0f16365a6c3b0cba4400, Status Code=404, City Name=Bang City, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Bang City, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="45" started-at="2019-06-08T21:08:47Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Bang City, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="191" started-at="2019-06-08T21:08:47Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'ABC1, IN' City Info, Error Message=city not found, App ID=17e5c69afcef0f16365a6c3b0cba4400, Status Code=404, City Name=ABC1, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'ABC1, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:47Z" finished-at="2019-06-08T21:08:47Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="40" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'ABC1, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="137" started-at="2019-06-08T21:08:48Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'ABC2, IN' City Info, Error Message=city not found, App ID=17e5c69afcef0f16365a6c3b0cba4400, Status Code=404, City Name=ABC2, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'ABC2, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="37" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'ABC2, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="153" started-at="2019-06-08T21:08:48Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'ABC3, IN' City Info, Error Message=city not found, App ID=17e5c69afcef0f16365a6c3b0cba4400, Status Code=404, City Name=ABC3, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'ABC3, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="40" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'ABC3, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="143" started-at="2019-06-08T21:08:48Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'ABC4, IN' City Info, Error Message=city not found, App ID=17e5c69afcef0f16365a6c3b0cba4400, Status Code=404, City Name=ABC4, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'ABC4, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="46" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'ABC4, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="150" started-at="2019-06-08T21:08:48Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'ABC5, IN' City Info, Error Message=city not found, App ID=17e5c69afcef0f16365a6c3b0cba4400, Status Code=404, City Name=ABC5, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'ABC5, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="54" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'ABC5, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="152" started-at="2019-06-08T21:08:48Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'ABC6, IN' City Info, Error Message=city not found, App ID=17e5c69afcef0f16365a6c3b0cba4400, Status Code=404, City Name=ABC6, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'ABC6, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:48Z" finished-at="2019-06-08T21:08:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="39" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'ABC6, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="140" started-at="2019-06-08T21:08:49Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'ABC7, IN' City Info, Error Message=city not found, App ID=17e5c69afcef0f16365a6c3b0cba4400, Status Code=404, City Name=ABC7, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'ABC7, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="42" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'ABC7, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="142" started-at="2019-06-08T21:08:49Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'ABC8, IN' City Info, Error Message=city not found, App ID=17e5c69afcef0f16365a6c3b0cba4400, Status Code=404, City Name=ABC8, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'ABC8, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":"404","message":"city not found"}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="60" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'ABC8, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="127" started-at="2019-06-08T21:08:49Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Tirupati, IN' City Info, Error Message=Invalid API key, App ID=17e5c69afcef0f16365a6c, Status Code=401, City Name=Tirupati, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Tirupati, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="90" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Tirupati, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="125" started-at="2019-06-08T21:08:49Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Bangalore, IN' City Info, Error Message=Invalid API key, App ID=17e5c69afcef0f16365a6c, Status Code=401, City Name=Bangalore, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Bangalore, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="43" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Bangalore, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:49Z" finished-at="2019-06-08T21:08:49Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="176" started-at="2019-06-08T21:08:49Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Delhi, IN' City Info, Error Message=Invalid API key, App ID=17e5c69afcef0f16365a6c, Status Code=401, City Name=Delhi, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Delhi, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="36" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Delhi, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="118" started-at="2019-06-08T21:08:50Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Agra, IN' City Info, Error Message=Invalid API key, App ID=17e5c69afcef0f16365a6c, Status Code=401, City Name=Agra, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Agra, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="114" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Agra, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="116" started-at="2019-06-08T21:08:50Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Bareilly, IN' City Info, Error Message=Invalid API key, App ID=17e5c69afcef0fb0cba4400, Status Code=401, City Name=Bareilly, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Bareilly, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="40" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Bareilly, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="118" started-at="2019-06-08T21:08:50Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Indore, IN' City Info, Error Message=Invalid API key, App ID=17e5c69afcef0fb0cba4400, Status Code=401, City Name=Indore, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Indore, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="42" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Indore, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="163" started-at="2019-06-08T21:08:50Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Mumbai, IN' City Info, Error Message=Invalid API key, App ID=17e5c69afcef0fb0cba4400, Status Code=401, City Name=Mumbai, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Mumbai, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="83" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Mumbai, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:50Z" finished-at="2019-06-08T21:08:50Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="115" started-at="2019-06-08T21:08:50Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Gurgaon, IN' City Info, Error Message=Invalid API key, App ID=17e5c69afcef0fb0cba4400, Status Code=401, City Name=Gurgaon, Country Code=IN}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Gurgaon, IN' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="39" started-at="2019-06-08T21:08:51Z" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Gurgaon, IN' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="1" started-at="2019-06-08T21:08:51Z" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="114" started-at="2019-06-08T21:08:51Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Manchester, US' City Info, Error Message=Invalid API key, App ID=69afcef0f16365a6c3b0cba4400, Status Code=401, City Name=Manchester, Country Code=US}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Manchester, US' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="38" started-at="2019-06-08T21:08:51Z" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Manchester, US' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="117" started-at="2019-06-08T21:08:51Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Birmingham, GB' City Info, Error Message=Invalid API key, App ID=69afcef0f16365a6c3b0cba4400, Status Code=401, City Name=Birmingham, Country Code=GB}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Birmingham, GB' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:51Z" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="42" started-at="2019-06-08T21:08:51Z" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Birmingham, GB' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method status="PASS" signature="beforeMethod(java.lang.reflect.Method)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="beforeMethod" is-config="true" duration-ms="0" started-at="2019-06-08T21:08:51Z" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.restassured.practise.TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method status="PASS" signature="verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="verifyWeatherInfoWithNegativeData" duration-ms="118" started-at="2019-06-08T21:08:51Z" data-provider="NegativeTestScenarios" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Test Case Name=Verify 'Glasgow, GB' City Info, Error Message=Invalid API key, App ID=69afcef0f16365a6c3b0cba4400, Status Code=401, City Name=Glasgow, Country Code=GB}]]>
              </value>
            </param>
          </params>
          <reporter-output>
            <line>
              <![CDATA[Test Case Name is: Verify 'Glasgow, GB' City Info]]>
            </line>
            <line>
              <![CDATA[Response is: {"cod":401, "message": "Invalid API key. Please see http://openweathermap.org/faq#error401 for more info."}]]>
            </line>
            <line>
              <![CDATA[Verified the error message successfully]]>
            </line>
          </reporter-output>
        </test-method> <!-- verifyWeatherInfoWithNegativeData -->
        <test-method status="PASS" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008]" name="afterMethod" is-config="true" duration-ms="42" started-at="2019-06-08T21:08:51Z" finished-at="2019-06-08T21:08:51Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=verifyWeatherInfoWithNegativeData status=SUCCESS method=TestWeatherAPIWithDataProvider.verifyWeatherInfoWithNegativeData(java.util.Map)[pri:0, instance:com.restassured.practise.TestWeatherAPIWithDataProvider@4f7d0008] output=Test Case Name is: Verify 'Glasgow, GB' City Info]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.restassured.practise.TestWeatherAPIWithDataProvider -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
